<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"><head><link href="../styles/stylesheet.css" rel="stylesheet" type="text/css"/></head><body class="body0" xmlns:epub="http://www.idpf.org/2007/ops"><p class="para3"><span class="span2">Write a guessing game in ncurses</span></p><p class="para4"><span class="span3">By Jim Hall</span></p><p class="para4"><span class="span3">In my </span><a href="https://opensource.com/article/21/8/ncurses-linux"><span class="span4">last article</span></a><span class="span3">, I gave a brief introduction to using the </span><span class="span10">ncurses</span><span class="span3"> library to write text-mode interactive applications in C. With </span><span class="span10">ncurses</span><span class="span3">, we can control where and how text gets displayed on the terminal. If you explore the </span><span class="span10">ncurses</span><span class="span3"> library functions by reading the manual pages, you’ll find there are a ton of different ways to display text, including bold text, colors, blinking text, windows, borders, graphic characters, and other features to make your application stand out.</span></p><p class="para4"><span class="span3">If you’d like to explore a more advanced program that demonstrates a few of these interesting features, here’s a simple “guess the number” game, updated to use </span><span class="span10">ncurses</span><span class="span3">. The program picks a random number in a range, then asks the user to make repeated guesses until they find the secret number. As the user makes their guess, the program lets them know if the guess was too low or too high.</span></p><p class="para4"><span class="span3">Note that this program limits the possible numbers from 0 to 7. Keeping the values to a limited range of single-digit numbers makes it easier to use </span><span class="span10">getch()</span><span class="span3"> to read a single number from the user. I also used the </span><span class="span10">getrandom</span><span class="span3"> kernel system call to generate random bits, masked with the number 7 to pick a random number from 0 (binary 0000) to 7 (binary 0111).</span></p><p class="para6"><span class="span6">#include &lt;curses.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;string.h&gt;          /* for strlen */</span></p><p class="para6"><span class="span6">#include &lt;sys/random.h&gt;      /* for getrandom */</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">random0_7()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">   int num;</span></p><p class="para6"><span class="span6">   getrandom(&amp;num, sizeof(int), GRND_NONBLOCK);</span></p><p class="para6"><span class="span6">   return (num &amp; 7); /* from 0000 to 0111 */</span></p><p class="para6"><span class="span6">}</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">read_guess()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  int ch;</span></p><p class="para6"><span class="span6">  do {</span></p><p class="para6"><span class="span6">    ch = getch();</span></p><p class="para6"><span class="span6">  } while ((ch &lt; &apos;0&apos;) || (ch &gt; &apos;7&apos;));</span></p><p class="para6"><span class="span6">  return (ch - &apos;0&apos;); /* turn into a number */</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">By using </span><span class="span10">ncurses</span><span class="span3">, we can add some visual interest. Let’s add functions to display important text at the top of the screen and a message line to display status information at the bottom of the screen.</span></p><p class="para6"><span class="span6">void</span></p><p class="para6"><span class="span6">print_header(const char *text)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  move(0, 0);</span></p><p class="para6"><span class="span6">  clrtoeol();</span></p><p class="para6"><span class="span6">  attron(A_BOLD);</span></p><p class="para6"><span class="span6">  mvaddstr(0, (COLS / 2) - (strlen(text) / 2), text);</span></p><p class="para6"><span class="span6">  attroff(A_BOLD);</span></p><p class="para6"><span class="span6">  refresh();</span></p><p class="para6"><span class="span6">}</span></p><p class="para6"><span class="span6">void</span></p><p class="para6"><span class="span6">print_status(const char *text)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  move(LINES - 1, 0);</span></p><p class="para6"><span class="span6">  clrtoeol();</span></p><p class="para6"><span class="span6">  attron(A_REVERSE);</span></p><p class="para6"><span class="span6">  mvaddstr(LINES - 1, 0, text);</span></p><p class="para6"><span class="span6">  attroff(A_REVERSE);</span></p><p class="para6"><span class="span6">  refresh();</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">With these functions, we can construct the main part of our number-guessing game. First, the program sets up the terminal for </span><span class="span10">ncurses</span><span class="span3">, then picks a random number from 0 to 7. After displaying a number scale, the program then enters a loop to ask the user for their guess.</span></p><p class="para4"><span class="span3">As the user makes their guess, the program provides visual feedback. If the guess is too low, the program prints a left square bracket under the number on the screen. If the guess is too high, the game prints a right square bracket. This helps the user to narrow their choice until they guess the correct number.</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  int number, guess;</span></p><p class="para6"><span class="span6">  initscr();</span></p><p class="para6"><span class="span6">  cbreak();</span></p><p class="para6"><span class="span6">  noecho();</span></p><p class="para6"><span class="span6">  number = random0_7();</span></p><p class="para6"><span class="span6">  mvprintw(1, COLS - 1, &quot;%d&quot;, number); /* debugging */</span></p><p class="para6"><span class="span6">  print_header(&quot;Guess the number 0-7&quot;);</span></p><p class="para6"><span class="span6">  mvaddstr(9, (COLS / 2) - 7, &quot;0 1 2 3 4 5 6 7&quot;);</span></p><p class="para6"><span class="span6">  print_status(&quot;Make a guess...&quot;);</span></p><p class="para6"><span class="span6">  do {</span></p><p class="para6"><span class="span6">    guess = read_guess();</span></p><p class="para6"><span class="span6">    move(10, (COLS / 2) - 7 + (guess * 2));</span></p><p class="para6"><span class="span6">    if (guess &lt; number) {</span></p><p class="para6"><span class="span6">      addch(&apos;[&apos;);</span></p><p class="para6"><span class="span6">      print_status(&quot;Too low&quot;);</span></p><p class="para6"><span class="span6">    }</span></p><p class="para6"><span class="span6">    else if (guess &gt; number) {</span></p><p class="para6"><span class="span6">      addch(&apos;]&apos;);</span></p><p class="para6"><span class="span6">      print_status(&quot;Too high&quot;);</span></p><p class="para6"><span class="span6">    }</span></p><p class="para6"><span class="span6">    else {</span></p><p class="para6"><span class="span6">      addch(&apos;^&apos;);</span></p><p class="para6"><span class="span6">    }</span></p><p class="para6"><span class="span6">  } while (guess != number);</span></p><p class="para6"><span class="span6">  print_header(&quot;That&apos;s right!&quot;);</span></p><p class="para6"><span class="span6">  print_status(&quot;Press any key to quit&quot;);</span></p><p class="para6"><span class="span6">  getch();</span></p><p class="para6"><span class="span6">  endwin();</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">Copy this program and compile it for yourself to try it out. Don’t forget that you need to tell GCC to link with the </span><span class="span10">ncurses</span><span class="span3"> library:</span></p><p class="para7"><span class="span6">$ gcc -o guess guess.c -lncurses</span></p><p class="para4"><span class="span3">I’ve left the debugging line in there, so you can see the secret number near the upper-right corner of the screen:</span></p><p class="para4"><img alt="OEBPS/images/image0005.png" class="frame3" src="../images/image0005.png"/><span class="span3"> </span> </p><p class="para5"><span class="span5">Get yourself going with ncurses</span></p><p class="para4"><span class="span3">This program uses a bunch of other features of </span><span class="span10">ncurses</span><span class="span3"> that you can use as a starting point. For example, the print_header function prints a message in bold text centered at the top of the screen, and the print_status function prints a message in reverse text at the bottom-left of the screen. Use this to help you get started with </span><span class="span10">ncurses</span><span class="span3"> programming.</span></p><p class="para4"> </p></body></html>