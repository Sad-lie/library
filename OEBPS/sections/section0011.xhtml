<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"><head><link href="../styles/stylesheet.css" rel="stylesheet" type="text/css"/></head><body class="body0" xmlns:epub="http://www.idpf.org/2007/ops"><p class="para3"><span class="span2">Parsing data with strtok in C</span></p><p class="para4"><span class="span3">By Jim Hall </span></p><p class="para4"><span class="span3">Some programs can just process an entire file at once, and other programs need to examine the file line-by-line. In the latter case, you likely need to parse data in each line. Fortunately, the C programming language has a standard C library function to do just that.</span></p><p class="para4"><span class="span3">The </span><span class="span10">strtok</span><span class="span3"> function breaks up a line of data according to &quot;delimiters&quot; that divide each field. It provides a streamlined way to parse data from an input string.</span></p><p class="para5"><span class="span5">Reading the first token</span></p><p class="para4"><span class="span3">Suppose your program needs to read a data file, where each line is separated into different fields with a semicolon. For example, one line from the data file might look like this:</span></p><p class="para7"><span class="span6">102*103;K1.2;K0.5</span></p><p class="para4"><span class="span3">In this example, store that in a string variable. You might have read this string into memory using any number of methods. Here&apos;s the line of code:</span></p><p class="para7"><span class="span6">char string[] = &quot;102*103;K1.2;K0.5&quot;;</span></p><p class="para4"><span class="span3">Once you have the line in a string, you can use </span><span class="span10">strtok</span><span class="span3"> to pull out &quot;tokens.&quot; Each token is part of the string, up to the next delimiter. The basic call to </span><span class="span10">strtok</span><span class="span3"> looks like this:</span></p><p class="para6"><span class="span6">#include &lt;string.h&gt;</span></p><p class="para7"><span class="span6">char *</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><span class="span7">strtok</span></a><span class="span6">(char *string, const char *delim);</span></p><p class="para4"><span class="span3">The first call to </span><span class="span10">strtok</span><span class="span3"> reads the string, adds a null (</span><span class="span8">\0</span><span class="span3">) character at the first delimiter, then returns a pointer to the first token. If the string is already empty, </span><span class="span10">strtok</span><span class="span3"> returns NULL.</span></p><p class="para6"><span class="span6">#include &lt;stdio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;string.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  char string[] = &quot;102*103;K1.2;K0.5&quot;;</span></p><p class="para6"><span class="span6">  char *token;</span></p><p class="para6"><span class="span6">  token = </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><span class="span7">strtok</span></a><span class="span6">(string, &quot;;&quot;);</span></p><p class="para6"><span class="span6">  if (token == NULL) {</span></p><p class="para6"><span class="span6">    </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(&quot;empty string!&quot;);</span></p><p class="para6"><span class="span6">    return 1;</span></p><p class="para6"><span class="span6">  }</span></p><p class="para6"><span class="span6">  </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(token);</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">This sample program pulls off the first token in the string, prints it, and exits. If you compile this program and run it, you should see this output:</span></p><p class="para7"><span class="span6">102*103</span></p><p class="para4"><span class="span3">102*103 is the first part of the input string, up to the first semicolon. That&apos;s the first token in the string.</span></p><p class="para4"><span class="span3">Note that calling </span><span class="span10">strtok</span><span class="span3"> modifies the string you are examining. If you want the original string preserved, make a copy before using </span><span class="span10">strtok</span><span class="span3">.</span></p><p class="para5"><span class="span5">Reading the rest of the string as tokens</span></p><p class="para4"><span class="span3">Separating the rest of the string into tokens requires calling </span><span class="span10">strtok</span><span class="span3"> multiple times until all tokens are read. After parsing the first token with </span><span class="span10">strtok</span><span class="span3">, any further calls to </span><span class="span10">strtok</span><span class="span3"> must use NULL in place of the string variable. The NULL allows </span><span class="span10">strtok</span><span class="span3"> to use an internal pointer to the next position in the string.</span></p><p class="para4"><span class="span3">Modify the sample program to read the rest of the string as tokens. Use a while loop to call </span><span class="span10">strtok</span><span class="span3"> multiple times until you get NULL.</span></p><p class="para6"><span class="span6">#include &lt;stdio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;string.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  char string[] = &quot;102*103;K1.2;K0.5&quot;;</span></p><p class="para6"><span class="span6">  char *token;</span></p><p class="para6"><span class="span6">  token = </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><span class="span7">strtok</span></a><span class="span6">(string, &quot;;&quot;);</span></p><p class="para6"> </p><p class="para6"><span class="span6">  if (token == NULL) {</span></p><p class="para6"><span class="span6">    </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(&quot;empty string!&quot;);</span></p><p class="para6"><span class="span6">    return 1;</span></p><p class="para6"><span class="span6">  }</span></p><p class="para6"><span class="span6">  while (token) {</span></p><p class="para6"><span class="span6">    /* print the token */</span></p><p class="para6"><span class="span6">    </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(token);</span></p><p class="para6"><span class="span6">    /* parse the same string again */</span></p><p class="para6"><span class="span6">    token = </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><span class="span7">strtok</span></a><span class="span6">(NULL, &quot;;&quot;);</span></p><p class="para6"><span class="span6">  }</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">By adding the while loop, you can parse the rest of the string, one token at a time. If you compile and run this sample program, you should see each token printed on a separate line, like this:</span></p><p class="para6"><span class="span6">102*103</span></p><p class="para6"><span class="span6">K1.2</span></p><p class="para7"><span class="span6">K0.5</span></p><p class="para5"><span class="span5">Multiple delimiters in the input string</span></p><p class="para4"><span class="span3">Using </span><span class="span10">strtok</span><span class="span3"> provides a quick and easy way to break up a string into just the parts you&apos;re looking for. You can use </span><span class="span10">strtok</span><span class="span3"> to parse all kinds of data, from plain text files to complex data. However, be careful that multiple delimiters next to each other are the same as one delimiter.</span></p><p class="para4"><span class="span3">For example, if you were reading CSV data (comma-separated values, such as data from a spreadsheet), you might expect a list of four numbers to look like this:</span></p><p class="para7"><span class="span6">1,2,3,4</span></p><p class="para4"><span class="span3">But if the third &quot;column&quot; in the data was empty, the CSV might instead look like this:</span></p><p class="para7"><span class="span6">1,2,,4</span></p><p class="para4"><span class="span3">This is where you need to be careful with </span><span class="span10">strtok</span><span class="span3">. With </span><span class="span10">strtok</span><span class="span3">, multiple delimiters next to each other are the same as a single delimiter. You can see this by modifying the sample program to call </span><span class="span10">strtok</span><span class="span3"> with a comma delimiter:</span></p><p class="para6"><span class="span6">#include &lt;stdio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;string.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  char string[] = &quot;1,2,,4&quot;;</span></p><p class="para6"><span class="span6">  char *token;</span></p><p class="para6"><span class="span6">  token = </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><span class="span7">strtok</span></a><span class="span6">(string, &quot;,&quot;);</span></p><p class="para6"><span class="span6">  if (token == NULL) {</span></p><p class="para6"><span class="span6">    </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(&quot;empty string!&quot;);</span></p><p class="para6"><span class="span6">    return 1;</span></p><p class="para6"><span class="span6">  }</span></p><p class="para6"><span class="span6">  while (token) {</span></p><p class="para6"><span class="span6">    </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(token);</span></p><p class="para6"><span class="span6">    token = </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><span class="span7">strtok</span></a><span class="span6">(NULL, &quot;,&quot;);</span></p><p class="para6"><span class="span6">  }</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">If you compile and run this new program, you&apos;ll see </span><span class="span10">strtok</span><span class="span3"> interprets the </span><span class="span8">,,</span><span class="span3"> as a single comma and parses the data as three numbers:</span></p><p class="para6"><span class="span6">1</span></p><p class="para6"><span class="span6">2</span></p><p class="para7"><span class="span6">4</span></p><p class="para4"><span class="span3">Knowing this limitation in </span><span class="span10">strtok</span><span class="span3"> can save you hours of debugging.</span></p><p class="para5"><span class="span5">Using multiple delimiters in strtok</span></p><p class="para4"><span class="span3">You might wonder why the </span><span class="span10">strtok</span><span class="span3"> function uses a string for the delimiter instead of a single character. That&apos;s because </span><span class="span10">strtok</span><span class="span3"> can look for different delimiters in the string. For example, a string of text might have spaces and tabs between each word. In this case, you would use each of those &quot;whitespace&quot; characters as delimiters:</span></p><p class="para6"><span class="span6">#include &lt;stdio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;string.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  char string[] = &quot;  hello \t world&quot;;</span></p><p class="para6"><span class="span6">  char *token;</span></p><p class="para6"><span class="span6">  token = </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><span class="span7">strtok</span></a><span class="span6">(string, &quot; \t&quot;);</span></p><p class="para6"><span class="span6">  if (token == NULL) {</span></p><p class="para6"><span class="span6">    </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(&quot;empty string&quot;);</span></p><p class="para6"><span class="span6">    return 1;</span></p><p class="para6"><span class="span6">  }</span></p><p class="para6"><span class="span6">  while (token) {</span></p><p class="para6"><span class="span6">    </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(token);</span></p><p class="para6"><span class="span6">    token = </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html"><span class="span7">strtok</span></a><span class="span6">(NULL, &quot; \t&quot;);</span></p><p class="para6"><span class="span6">  }</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">Each call to </span><span class="span10">strtok</span><span class="span3"> uses both a space and tab character as the delimiter string, allowing </span><span class="span10">strtok</span><span class="span3"> to parse the line correctly into two tokens.</span></p><p class="para5"><span class="span5">Wrap up</span></p><p class="para4"><span class="span3">The </span><span class="span10">strtok</span><span class="span3"> function is a handy way to read and interpret data from strings. Use it in your next project to simplify how you read data into your program.</span></p><p class="para4"> </p></body></html>