<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"><head><link href="../styles/stylesheet.css" rel="stylesheet" type="text/css"/></head><body class="body0" xmlns:epub="http://www.idpf.org/2007/ops"><p class="para3"><span class="span2">Position text with ncurses</span></p><p class="para4"><span class="span3">By Jim Hall</span></p><p class="para4"><span class="span3">Most Linux utilities just scroll text from the bottom of the screen. But what if you wanted to position text on the screen, such as for a game or a data display? That&apos;s where </span><span class="span10">ncurses</span><span class="span3"> comes in.</span></p><p class="para4"><span class="span10">curses</span><span class="span3"> is an old Unix library that supports cursor control on a text terminal screen. The name </span><span class="span9">curses</span><span class="span3"> comes from the term </span><span class="span9">cursor control</span><span class="span3">. Years later, others wrote an improved version of </span><span class="span10">curses</span><span class="span3"> to add new features, called </span><span class="span9">new curses</span><span class="span3"> or </span><span class="span10">ncurses</span><span class="span3">. You can find </span><span class="span10">ncurses</span><span class="span3"> in every modern Linux distribution, although the development libraries, header files, and documentation may not be installed by default. For example, on Fedora, you will need to install the </span><span class="span10">ncurses-devel</span><span class="span3"> package with this command:</span></p><p class="para7"><span class="span6">$ sudo dnf install ncurses-devel</span></p><p class="para5"><span class="span5">Using ncurses in a program</span></p><p class="para4"><span class="span3">To directly address the screen, you&apos;ll first need to initialize the </span><span class="span10">ncurses</span><span class="span3"> library. Most programs will do that with these three lines:</span></p><p class="para8"><span class="span3">initscr(); Initialize the screen and the </span><span class="span10">ncurses</span><span class="span3"> code </span></p><p class="para8"><span class="span3">cbreak(); Disable buffering and make typed input immediately available </span></p><p class="para4"><span class="span3">noecho(); Turn off echo, so user input is not displayed to the screen </span></p><p class="para4"><span class="span3">These functions are defined in the </span><span class="span10">curses.h</span><span class="span3"> header file, which you&apos;ll need to include in your program with:</span></p><p class="para7"><span class="span6">#include &lt;curses.h&gt;</span></p><p class="para4"><span class="span3">After initializing the terminal, you&apos;re free to use any of the </span><span class="span10">ncurses</span><span class="span3"> functions, some of which we&apos;ll explore in a sample program.</span></p><p class="para4"><span class="span3">When you&apos;re done with </span><span class="span10">ncurses</span><span class="span3"> and want to go back to regular terminal mode, use </span><span class="span10">endwin();</span><span class="span3"> to reset everything. This command resets any screen colors, moves the cursor to the lower-left of the screen, and makes the cursor visible. You usually do this right before exiting the program.</span></p><p class="para5"><span class="span5">Addressing the screen</span></p><p class="para4"><span class="span3">The first thing to know about </span><span class="span10">ncurses</span><span class="span3"> is that screen coordinates are </span><span class="span9">row,col</span><span class="span3">, and start in the upper-left at 0,0. </span><span class="span10">ncurses</span><span class="span3"> defines two global variables to help you identify the screen size: LINES is the number of lines on the screen, and COLS is the number of columns. The bottom-right position is LINES-1,COLS-1.</span></p><p class="para4"><span class="span3">For example, if you wanted to move the cursor to line 10 and column 30, you could use the move function with those coordinates:</span></p><p class="para7"><span class="span6">move(10, 30);</span></p><p class="para4"><span class="span3">Any text you display after that will start at that screen location. To display a single character, use the </span><span class="span10">addch(c)</span><span class="span3"> function with a single character. To display a string, use </span><span class="span10">addstr(s)</span><span class="span3"> with your string. For formatted output that&apos;s similar to </span><span class="span10">printf</span><span class="span3">, use </span><span class="span10">printw(fmt, …)</span><span class="span3"> with the usual options.</span></p><p class="para4"><span class="span3">Moving to a screen location and displaying text is such a common thing that </span><span class="span10">ncurses</span><span class="span3"> provides a shortcut to do both at once. The </span><span class="span10">mvaddch(row, col, c)</span><span class="span3"> function will display a character at screen location </span><span class="span9">row,col</span><span class="span3">. And the </span><span class="span10">mvaddstr(row, col, s)</span><span class="span3"> function will display a string at that location. For a more direct example, using </span><span class="span10">mvaddstr(10, 30, &quot;Welcome to ncurses&quot;);</span><span class="span3"> in a program will display the text &quot;Welcome to ncurses&quot; starting at row 10 and column 30. And the line </span><span class="span10">mvaddch(0, 0, &apos;+&apos;);</span><span class="span3"> will display a single plus sign in the upper-left corner at row 0 and column 0.</span></p><p class="para4"><span class="span3">Drawing text to the terminal screen can have a performance impact on certain systems, especially on older hardware terminals. So </span><span class="span10">ncurses</span><span class="span3"> lets you &quot;stack up&quot; a bunch of text to display to the screen, then use the </span><span class="span10">refresh()</span><span class="span3"> function to make all of those changes visible to the user.</span></p><p class="para4"><span class="span3">Let&apos;s look at a simple example that pulls everything together:</span></p><p class="para6"><span class="span6">#include &lt;curses.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  initscr();</span></p><p class="para6"><span class="span6">  cbreak();</span></p><p class="para6"><span class="span6">  noecho();</span></p><p class="para6"><span class="span6">  mvaddch(0, 0, &apos;+&apos;);</span></p><p class="para6"><span class="span6">  mvaddch(LINES - 1, 0, &apos;-&apos;);</span></p><p class="para6"><span class="span6">  mvaddstr(10, 30, &quot;press any key to quit&quot;);</span></p><p class="para6"><span class="span6">  refresh();</span></p><p class="para6"><span class="span6">  getch();</span></p><p class="para6"><span class="span6">  endwin();</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">The program starts by initializing the terminal, then prints a plus sign in the upper-left corner, a minus in the lower-left corner, and the text &quot;press any key to quit&quot; at row 10 and column 30. The program gets a single character from the keyboard using the getch() function, then uses </span><span class="span10">endwin()</span><span class="span3"> to reset the terminal before the program exits completely.</span></p><p class="para4"><span class="span10">getch()</span><span class="span3"> is a useful function that you could use for many things. I often use it as a way to pause before I quit the program. And as with most </span><span class="span10">ncurses</span><span class="span3"> functions, there&apos;s also a version of </span><span class="span10">getch()</span><span class="span3"> called </span><span class="span10">mvgetch(row, col)</span><span class="span3"> to move to screen position </span><span class="span9">row,col</span><span class="span3"> before waiting for a character.</span></p><p class="para5"><span class="span5">Compiling with ncurses</span></p><p class="para4"><span class="span3">If you tried to compile that sample program in the usual way, such as </span><span class="span8">gcc pause.c</span><span class="span3">, you&apos;ll probably get a huge list of errors from the linker. That&apos;s because the </span><span class="span10">ncurses</span><span class="span3"> library is not linked automatically by the GNU C Compiler. Instead, you&apos;ll need to load it for linking using the </span><span class="span8">-l ncurses</span><span class="span3"> command-line option.</span></p><p class="para7"><span class="span6">$ gcc -o pause pause.c -lncurses</span></p><p class="para4"><span class="span3">Running the new program will print a simple &quot;press any key to quit&quot; message that&apos;s more or less centered on the screen:</span></p><p class="para4"><img alt="OEBPS/images/image0006.png" class="frame4" src="../images/image0006.png"/><span class="span3"> </span> </p><p class="para5"><span class="span5">Building better programs with ncurses</span></p><p class="para4"><span class="span3">Explore the </span><span class="span10">ncurses</span><span class="span3"> library functions to learn about other ways to display text to the screen. You can find a list of all </span><span class="span10">ncurses</span><span class="span3"> functions in the man ncurses manual page. This gives a general overview of </span><span class="span10">ncurses</span><span class="span3"> and provides a table-like list of the different </span><span class="span10">ncurses</span><span class="span3"> functions, with a reference to the manual page that has full details. For example, </span><span class="span10">printw</span><span class="span3"> is described in the </span><span class="span9">curs_printw(3X)</span><span class="span3"> manual page, which you can view with:</span></p><p class="para7"><span class="span6">$ man 3x curs_printw</span></p><p class="para4"><span class="span3">or just:</span></p><p class="para7"><span class="span6">$ man curs_printw</span></p><p class="para4"><span class="span3">With </span><span class="span10">ncurses</span><span class="span3">, you can create more interesting programs. By printing text at specific locations on the screen, you can create games and advanced utilities to run in the terminal.</span></p></body></html>