<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"><head><link href="../styles/stylesheet.css" rel="stylesheet" type="text/css"/></head><body class="body0" xmlns:epub="http://www.idpf.org/2007/ops"><p class="para3"><span class="span2">Learn C by writing a simple game</span></p><p class="para4"><span class="span3">By Jim Hall </span></p><p class="para4"><span class="span3">I </span><a href="https://opensource.com/article/20/8/learn-open-source"><span class="span4">taught myself about programming</span></a><span class="span3"> back in elementary school. My first programs were on the Apple II, but eventually, I learned C by reading books and practicing. And the best way to practice programming is to write sample programs that help exercise your new knowledge.</span></p><p class="para4"><span class="span3">One program I like to write in a new language is a simple &quot;guess the number&quot; game. The computer picks a random number from 1 to 100, and you have to figure it out by making guesses. In another article, I showed how to write this </span><a href="https://opensource.com/article/20/12/learn-bash"><span class="span4">&quot;Guess the number&quot; game in Bash</span></a><span class="span3">, and my fellow Opensource.com authors have written articles about how to write it in </span><a href="https://opensource.com/article/20/12/learn-java"><span class="span4">Java</span></a><span class="span3">, </span><a href="https://opensource.com/article/20/12/julia"><span class="span4">Julia</span></a><span class="span3">, and other computer languages.</span></p><p class="para4"><span class="span3">What&apos;s great about a &quot;Guess the number&quot; game is that it exercises several programming concepts: how to use variables, how to compare values, how to print output, and how to read input.</span></p><p class="para4"><span class="span3">Over the summer, I recorded </span><a href="https://opensource.com/article/20/8/teaching-c"><span class="span4">a video series</span></a><span class="span3"> to teach people how to write programs in the </span><a href="https://opensource.com/article/20/8/c-programming-cheat-sheet"><span class="span4">C programming language</span></a><span class="span3">. Since then, I&apos;ve heard from many people who are learning C programming by following it. So, I thought I&apos;d follow up by writing a &quot;Guess the number&quot; game in C.</span></p><p class="para5"><span class="span5">Pick a random number</span></p><p class="para4"><span class="span3">Start the &quot;Guess the number&quot; game by writing a function to pick a random number. When writing functions, good programmers try to make them flexible, so they can reuse them to solve slightly different problems. So, instead of hard-coding the function to pick a random number between 1 and 100, write the function to pick a random number between 1 and some integer value </span><span class="span8">maxval</span><span class="span3">:</span></p><p class="para6"><span class="span6">#include &lt;stdio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;sys/random.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">randnum(int maxval)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  /* pick a random number from 1 to maxval */</span></p><p class="para6"><span class="span6">  int randval;</span></p><p class="para6"><span class="span6">  getrandom(&amp;randval, sizeof(int), GRND_NONBLOCK);</span></p><p class="para6"><span class="span6">  /* could be negative, so ensure it&apos;s positive */</span></p><p class="para6"><span class="span6">  if (randval &lt; 0) {</span></p><p class="para6"><span class="span6">    return (-1 * randval % maxval + 1);</span></p><p class="para6"><span class="span6">  }</span></p><p class="para6"><span class="span6">  else {</span></p><p class="para6"><span class="span6">    return (randval % maxval + 1);</span></p><p class="para6"><span class="span6">  }</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">The function uses the Linux system call </span><span class="span8">getrandom</span><span class="span3"> to generate a series of random bits. You can learn more about this system call on the man page, but note that </span><span class="span8">getrandom</span><span class="span3"> will fill the variable with random zeroes and ones. That means the final value could be positive or negative, so you need to do a test afterward to ensure the result of your </span><span class="span8">randnum</span><span class="span3"> function is a positive value.</span></p><p class="para5"><span class="span5">Write the program</span></p><p class="para4"><span class="span3">You can use this function to write your &quot;Guess the number&quot; program:</span></p><p class="para6"><span class="span6">#include &lt;stdio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;sys/random.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">randnum(int maxval)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  ...</span></p><p class="para6"><span class="span6">}</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main(void)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  int number;</span></p><p class="para6"><span class="span6">  int guess;</span></p><p class="para6"><span class="span6">  number = randnum(100);</span></p><p class="para6"><span class="span6">  </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(&quot;Guess a number between 1 and 100&quot;);</span></p><p class="para6"><span class="span6">  do {</span></p><p class="para6"><span class="span6">    </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html"><span class="span7">scanf</span></a><span class="span6">(&quot;%d&quot;, &amp;guess);</span></p><p class="para6"><span class="span6">    if (guess &lt; number) {</span></p><p class="para6"><span class="span6">      </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(&quot;Too low&quot;);</span></p><p class="para6"><span class="span6">    }</span></p><p class="para6"><span class="span6">    else if (guess &gt; number) {</span></p><p class="para6"><span class="span6">      </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(&quot;Too high&quot;);</span></p><p class="para6"><span class="span6">    }</span></p><p class="para6"><span class="span6">  } while (guess != number);</span></p><p class="para6"><span class="span6">  </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="span7">puts</span></a><span class="span6">(&quot;That&apos;s right!&quot;);</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">The program starts by picking a random number between 1 and 100 using the </span><span class="span8">randnum</span><span class="span3"> function. After printing a prompt to the user, the program enters a </span><span class="span8">do-while</span><span class="span3"> loop so the user can guess the number.</span></p><p class="para4"><span class="span3">In each iteration of the loop, the program tests the user&apos;s guess. If the user&apos;s guess is less than the random number, the program prints &quot;Too low,&quot; and if the guess is greater than the random number, the program prints &quot;Too high.&quot; The loop continues until the user&apos;s guess is the same as the random number.</span></p><p class="para4"><span class="span3">When the loop exits, the program prints &quot;That&apos;s right!&quot; and then immediately ends.</span></p><p class="para6"><span class="span6">$ gcc -o guess -Wall guess.c</span></p><p class="para6"><span class="span6">$ ./guess</span></p><p class="para6"><span class="span6">Guess a number between 1 and 100</span></p><p class="para6"><span class="span6">50</span></p><p class="para6"><span class="span6">Too high</span></p><p class="para6"><span class="span6">30</span></p><p class="para6"><span class="span6">Too low</span></p><p class="para6"><span class="span6">40</span></p><p class="para6"><span class="span6">Too low</span></p><p class="para6"><span class="span6">45</span></p><p class="para6"><span class="span6">Too high</span></p><p class="para6"><span class="span6">42</span></p><p class="para6"><span class="span6">Too low</span></p><p class="para6"><span class="span6">43</span></p><p class="para6"><span class="span6">Too low</span></p><p class="para6"><span class="span6">44</span></p><p class="para7"><span class="span6">That&apos;s right!</span></p><p class="para5"><span class="span5">Try it out</span></p><p class="para4"><span class="span3">This &quot;guess the number&quot; game is a great introductory program when learning a new programming language because it exercises several common programming concepts in a pretty straightforward way. By implementing this simple game in different programming languages, you can demonstrate some core concepts and compare details in each language.</span></p></body></html>