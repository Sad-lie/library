<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"><head><link href="../styles/stylesheet.css" rel="stylesheet" type="text/css"/></head><body class="body0" xmlns:epub="http://www.idpf.org/2007/ops"><p class="para3"><span class="span2">How to program in C on FreeDOS</span></p><p class="para4"><span class="span3">By Jim Hall </span></p><p class="para4"><span class="span3">When I first started using DOS, I enjoyed writing games and other interesting programs using BASIC, which DOS included. Much later, I learned the C programming language.</span></p><p class="para4"><span class="span3">I immediately loved working in C! It was a straightforward programming language that gave me a ton of flexibility for writing useful programs. In fact, much of the FreeDOS core utilities are written in C and Assembly.</span></p><p class="para4"><span class="span3">So it&apos;s probably not surprising that FreeDOS 1.3 RC4 includes a C compiler—along with other programming languages. The FreeDOS 1.3 RC4 LiveCD includes two C compilers—Bruce&apos;s C compiler (a simple C compiler) and the OpenWatcom C compiler. On the Bonus CD, you can also find DJGPP (a 32-bit C compiler based on GNU GCC) and the IA-16 port of GCC (requires a &apos;386 or better CPU to compile, but the generated programs can run on low-end systems).</span></p><p class="para4"><span class="span3">Programming in C on FreeDOS is basically the same as C programming on Linux, with two exceptions:</span></p><p class="para8"><span class="span10">You need to remain aware of how much memory you use.</span><span class="span3"> Linux allows programs to use lots of memory, but FreeDOS is more limited. Thus, DOS programs used one of four </span><a href="https://devblogs.microsoft.com/oldnewthing/20200728-00/?p=104012"><span class="span4">memory models</span></a><span class="span3"> (large, medium, compact, and small) depending on how much memory they needed. </span></p><p class="para4"><span class="span10">You can directly access the console.</span><span class="span3"> On Linux, you can create </span><span class="span9">text-mode</span><span class="span3"> mode programs that draw to the terminal screen using a library like </span><span class="span9">ncurses</span><span class="span3">. But DOS allows programs to access the console and video hardware. This provides a great deal of flexibility in writing more interesting programs. </span></p><p class="para4"><span class="span3">I like to write my C programs in the IA-16 port of GCC, or OpenWatcom, depending on what program I am working on. The OpenWatcom C compiler is easier to install since it&apos;s only a single package. That&apos;s why we provide OpenWatcom on the FreeDOS LiveCD, so you can </span><span class="span3">install it automatically if you choose to do a &quot;Full installation including applications and games&quot; when you install FreeDOS 1.3 RC4. If you opted to install a &quot;Plain DOS system,&quot; then you&apos;ll need to install the OpenWatcom C compiler afterward, using the FDIMPLES package manager.</span></p><p class="para4"><img alt="OEBPS/images/image0012.png" class="frame5" src="../images/image0012.png"/><span class="span3"> </span> </p><p class="para5"><span class="span5">DOS C programming</span></p><p class="para4"><span class="span3">You can find documentation and library guides on the </span><a href="http://openwatcom.org/"><span class="span4">OpenWatcom project website</span></a><span class="span3"> to learn all about the unique DOS C programming libraries provided by the OpenWatcom C compiler. To briefly describe a few of the most useful functions:</span></p><p class="para4"><span class="span3">From </span><span class="span8">conio.h</span><span class="span3">:</span></p><p class="para8"><span class="span8">int getch(void)—</span><span class="span3">Get a single keystroke from the keyboard </span></p><p class="para4"><span class="span8">int getche(void)—</span><span class="span3">Get a single keystroke from the keyboard, and echo it </span></p><p class="para4"><span class="span3">From </span><span class="span8">graph.h</span><span class="span3">:</span></p><p class="para8"><span class="span8">_settextcolor(short color)—</span><span class="span3">Sets the color when printing text </span></p><p class="para8"><span class="span8">_setbkcolor(short color)—</span><span class="span3">Sets the background color when printing text </span></p><p class="para8"><span class="span8">_settextposition(short y, short x)—</span><span class="span3">Move the cursor to row </span><span class="span8">y</span><span class="span3"> and column </span><span class="span8">x</span><span class="span3"> </span></p><p class="para4"><span class="span8">_outtext(char _FAR *string)—</span><span class="span3">Print a string directly to the screen, starting at the current cursor location </span></p><p class="para4"><span class="span3">DOS only supports </span><a href="https://opensource.com/article/21/6/freedos-sixteen-colors"><span class="span4">sixteen text colors</span></a><span class="span3"> and eight background colors. You can use the values 0 (Black) to 15 (Bright White) to specify the text colors, and 0 (Black) to 7 (White) for the background colors:</span></p><p class="para8"><span class="span10">0</span><span class="span3">—Black </span></p><p class="para8"><span class="span10">1</span><span class="span3">—Blue </span></p><p class="para8"><span class="span10">2</span><span class="span3">—Green </span></p><p class="para8"><span class="span10">3</span><span class="span3">—Cyan </span></p><p class="para8"><span class="span10">4</span><span class="span3">—Red </span></p><p class="para8"><span class="span10">5</span><span class="span3">—Magenta </span></p><p class="para8"><span class="span10">6</span><span class="span3">—Brown </span></p><p class="para8"><span class="span10">7</span><span class="span3">—White </span></p><p class="para8"><span class="span10">8</span><span class="span3">—Bright Black </span></p><p class="para8"><span class="span10">9</span><span class="span3">—Bright Blue </span></p><p class="para8"><span class="span10">10</span><span class="span3">—Bright Green </span></p><p class="para8"><span class="span10">11</span><span class="span3">—Bright Cyan </span></p><p class="para8"><span class="span10">12</span><span class="span3">—Bright Red </span></p><p class="para8"><span class="span10">13</span><span class="span3">—Bright Magenta </span></p><p class="para8"><span class="span10">14</span><span class="span3">—Yellow </span></p><p class="para4"><span class="span10">15</span><span class="span3">—Bright White </span></p><p class="para5"><span class="span5">A fancy &quot;Hello world&quot; program</span></p><p class="para4"><span class="span3">The first program many new developers learn to write is a program that just prints &quot;Hello world&quot; to the user. We can use the DOS &quot;conio&quot; and &quot;graphics&quot; libraries to make this a more interesting program and print &quot;Hello world&quot; in a rainbow of colors.</span></p><p class="para4"><span class="span3">In this case, we&apos;ll iterate through each of the text colors, from 0 (Black) to 15 (Bright White). As we print each line, we&apos;ll indent the next line by one space. When we&apos;re done, we&apos;ll wait for the user to press any key, then we&apos;ll reset the screen and exit.</span></p><p class="para4"><span class="span3">You can use any text editor to write your C source code. I like using a few different editors, including </span><a href="https://opensource.com/article/21/6/freedos-text-editor"><span class="span4">FreeDOS Edit</span></a><span class="span14"> </span><span class="span3">and </span><a href="https://opensource.com/article/21/6/freemacs"><span class="span4">Freemacs</span></a><span class="span3">, but more recently I&apos;ve been using the </span><a href="https://opensource.com/article/21/1/fed-editor"><span class="span4">FED </span></a><a href="https://opensource.com/article/21/1/fed-editor"><span class="span4">editor</span></a><span class="span3"> because it provides </span><span class="span9">syntax highlighting</span><span class="span3">, making it easier to see keywords, strings, and variables in my program source code.</span></p><p class="para4"><img alt="OEBPS/images/image0013.png" class="frame5" src="../images/image0013.png"/><span class="span3"> </span> </p><p class="para4"><span class="span3">Before you can compile using OpenWatcom, you&apos;ll need to set up the DOS </span><a href="https://opensource.com/article/21/6/freedos-environment-variables"><span class="span4">environment variables</span></a><span class="span15"> </span><span class="span3">so OpenWatcom can find its support files. The OpenWatcom C compiler package includes a setup </span><a href="https://opensource.com/article/21/6/automate-tasks-bat-files-freedos"><span class="span4">batch file</span></a><span class="span3"> that does this for you, as </span><span class="span8">\DEVEL\OW\OWSETENV.BAT</span><span class="span3">. Run this batch file to automatically set up your environment for OpenWatcom.</span></p><p class="para4"><span class="span3">Once your environment is ready, you can use the OpenWatcom compiler to compile this &quot;Hello world&quot; program. I&apos;ve saved my C source file as </span><span class="span8">TEST.C</span><span class="span3">, so I can type </span><span class="span8">WCL TEST.C</span><span class="span3"> to compile and link the program into a DOS executable, called </span><span class="span8">TEST.EXE</span><span class="span3">. In the output messages from OpenWatcom, you can see that </span><span class="span8">WCL</span><span class="span3"> actually calls the OpenWatcom C Compiler (</span><span class="span8">WCC</span><span class="span3">) to compile, and the OpenWatcom Linker (</span><span class="span8">WLINK</span><span class="span3">) to perform the object linking stage:</span></p><p class="para4"><img alt="OEBPS/images/image0014.png" class="frame5" src="../images/image0014.png"/><span class="span3"> </span> </p><p class="para4"><span class="span3">OpenWatcom prints some extraneous output that may make it difficult to spot errors or warnings. To tell the compiler to suppress most of these extra messages, use the </span><span class="span8">/Q</span><span class="span3"> (&quot;Quiet&quot;) option when compiling:</span></p><p class="para4"><img alt="OEBPS/images/image0015.png" class="frame5" src="../images/image0015.png"/><span class="span3"> </span> </p><p class="para4"><span class="span3">If you don&apos;t see any error messages when compiling the C source file, you can now run your DOS program. This &quot;Hello world&quot; example is </span><span class="span8">TEST.EXE</span><span class="span3">. Enter </span><span class="span8">TEST</span><span class="span3"> on the DOS command line to run the new program, and you should see this very pretty output:</span></p><p class="para4"><img alt="OEBPS/images/image0016.png" class="frame5" src="../images/image0016.png"/><span class="span3"> </span> </p><p class="para4"><span class="span3">C is a very efficient programming language that works well for writing programs on limited-resource systems like DOS. There&apos;s lots more that you can do by programming in C on DOS. If you&apos;re new to the C language, you can learn C yourself by following along in our </span><a href="https://www.freedos.org/books/cprogramming/"><span class="span4">Writing FreeDOS Programs in C</span></a><span class="span3"> self-paced ebook on the FreeDOS website, and the accompanying &quot;how-to&quot; video series on the </span><a href="https://www.youtube.com/freedosproject"><span class="span4">FreeDOS YouTube channel</span></a><span class="span3">.</span></p><p class="para4"> </p></body></html>