<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"><head><link href="../styles/stylesheet.css" rel="stylesheet" type="text/css"/></head><body class="body0" xmlns:epub="http://www.idpf.org/2007/ops"><p class="para3"><span class="span2">Get started programming with DOS conio</span></p><p class="para4"><span class="span3">By Jim Hall</span></p><p class="para4"><span class="span3">One of the reasons so many DOS applications sported a text user interface (or TUI) is because it was so easy to do. The standard way to control </span><span class="span10">con</span><span class="span3">sole </span><span class="span10">i</span><span class="span3">nput and </span><span class="span10">o</span><span class="span3">utput (</span><span class="span10">conio</span><span class="span3">) was with the </span><span class="span8">conio</span><span class="span3"> library for many C programmers. This is a de-facto standard library on DOS, which gained popularity as implemented by Borland&apos;s proprietary C compiler as </span><span class="span8">conio.h</span><span class="span3">. You can also find a similar </span><span class="span8">conio</span><span class="span3"> implementation in TK Chia&apos;s IA-16 DOS port of the GNU C Compiler in the </span><span class="span8">libi86</span><span class="span3"> library of non-standard routines. The library includes implementations of </span><span class="span8">conio.h</span><span class="span3"> functions that mimic Borland Turbo C++ to set video modes, display colored text, move the cursor, and so on.</span></p><p class="para4"><span class="span3">For years, FreeDOS included the OpenWatcom C Compiler in the standard distributions. OpenWatcom supports its own version of </span><span class="span8">conio</span><span class="span3">, implemented in </span><span class="span8">conio.h</span><span class="span3"> for particular console input and output functions, and in </span><span class="span8">graph.h</span><span class="span3"> to set colors and perform other manipulation. Because the OpenWatcom C Compiler has been used for a long time by many developers, this </span><span class="span8">conio</span><span class="span3"> implementation is also quite popular. Let&apos;s get started with the OpenWatcom </span><span class="span8">conio</span><span class="span3"> functions.</span></p><p class="para5"><span class="span5">Setting the video mode</span></p><p class="para4"><span class="span3">Everything you do is immediately displayed on-screen via hardware. This is different from the </span><span class="span8">ncurses</span><span class="span3"> library on Linux, where everything is displayed through terminal emulation. On DOS, everything is running on hardware. And that means DOS </span><span class="span8">conio</span><span class="span3"> programs can easily access video modes and leverage screen regions in ways that are difficult using Linux </span><span class="span8">ncurses</span><span class="span3">.</span></p><p class="para4"><span class="span3">To start, you need to set the </span><span class="span9">video mode</span><span class="span3">. On OpenWatcom, you do this with the </span><span class="span8">_setvideomode</span><span class="span3"> function. This function takes one of several possible values, but for most programs that run in color mode in a standard 80x25 screen, use </span><span class="span8">_TEXTC80</span><span class="span3"> as the mode.</span></p><p class="para6"><span class="span6">#include &lt;conio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;graph.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  _setvideomode(_TEXTC80);</span></p><p class="para7"><span class="span6">  … </span></p><p class="para4"><span class="span3">When you&apos;re done with your program and ready to exit back to DOS, you should reset the video mode back to whatever values it had before. For that, you can use </span><span class="span8">_DEFAULTMODE</span><span class="span3"> as the mode.</span></p><p class="para6"><span class="span6"> _setvideomode(_DEFAULTMODE);</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para5"><span class="span5">Setting the colors</span></p><p class="para4"><span class="span3">Every PC built after 1981&apos;s Color/Graphics Adapter supports </span><a href="https://opensource.com/article/21/6/freedos-sixteen-colors"><span class="span4">16 text colors and 8 background colors</span></a><span class="span3">. Background colors are addressed with color indices 0 through 7, and text colors can be any value from 0 to 15:</span></p><table class="table0"><tbody><tr class="rowTable0"><td class="cellTable0"><p class="para1"><span class="span12"> </span></p></td><td class="cellTable1"><p class="para1"><span class="span13">0 Black</span></p></td><td class="cellTable2"><p class="para1"><span class="span13"> </span></p></td><td class="cellTable3"><p class="para1"><span class="span13">8 Bright Black</span></p></td></tr><tr class="rowTable0"><td class="cellTable4"><p class="para1"><span class="span12"> </span></p></td><td class="cellTable1"><p class="para1"><span class="span13">1 Blue</span></p></td><td class="cellTable5"><p class="para1"><span class="span13"> </span></p></td><td class="cellTable3"><p class="para1"><span class="span13">9 Bright Blue</span></p></td></tr><tr class="rowTable0"><td class="cellTable6"><p class="para1"><span class="span12"> </span></p></td><td class="cellTable1"><p class="para1"><span class="span13">2 Green</span></p></td><td class="cellTable7"><p class="para1"><span class="span13"> </span></p></td><td class="cellTable3"><p class="para1"><span class="span13">10 Bright Green</span></p></td></tr><tr class="rowTable0"><td class="cellTable8"><p class="para1"><span class="span12"> </span></p></td><td class="cellTable1"><p class="para1"><span class="span13">3 Cyan</span></p></td><td class="cellTable9"><p class="para1"><span class="span13"> </span></p></td><td class="cellTable3"><p class="para1"><span class="span13">11 Bright Cyan</span></p></td></tr><tr class="rowTable0"><td class="cellTable10"><p class="para1"><span class="span12"> </span></p></td><td class="cellTable1"><p class="para1"><span class="span13">4 Red</span></p></td><td class="cellTable11"><p class="para1"><span class="span13"> </span></p></td><td class="cellTable3"><p class="para1"><span class="span13">12 Bright Red</span></p></td></tr><tr class="rowTable0"><td class="cellTable12"><p class="para1"><span class="span12"> </span></p></td><td class="cellTable1"><p class="para1"><span class="span13">5 Magenta</span></p></td><td class="cellTable13"><p class="para1"><span class="span13"> </span></p></td><td class="cellTable3"><p class="para1"><span class="span13">13 Bright Magenta</span></p></td></tr><tr class="rowTable0"><td class="cellTable14"><p class="para1"><span class="span12"> </span></p></td><td class="cellTable1"><p class="para1"><span class="span13">6 Brown</span></p></td><td class="cellTable15"><p class="para1"><span class="span13"> </span></p></td><td class="cellTable3"><p class="para1"><span class="span13">14 Yellow</span></p></td></tr><tr class="rowTable0"><td class="cellTable16"><p class="para1"><span class="span12"> </span></p></td><td class="cellTable1"><p class="para1"><span class="span13">7 White</span></p></td><td class="cellTable17"><p class="para1"><span class="span13"> </span></p></td><td class="cellTable3"><p class="para1"><span class="span13">15 Bright White</span></p></td></tr></tbody></table><p class="para4"> </p><p class="para4"><span class="span3">You can set both the text color and the color behind it. Use the </span><span class="span8">_settextcolor</span><span class="span3"> function to set the text &quot;foreground&quot; color and </span><span class="span8">_setbkcolor</span><span class="span3"> to set the text &quot;background&quot; color. For example, to set the colors to yellow text on a red background, you would use this pair of functions:</span></p><p class="para6"><span class="span6"> _settextcolor(14);</span></p><p class="para7"><span class="span6"> _setbkcolor(4);</span></p><p class="para5"><span class="span5">Positioning text</span></p><p class="para4"><span class="span3">In </span><span class="span8">conio</span><span class="span3">, screen coordinates are always </span><span class="span9">row</span><span class="span3">,</span><span class="span9">col</span><span class="span3"> and start with 1,1 in the upper-left corner. For a standard 80-column display with 25 lines, the bottom-right corner is 25,80.</span></p><p class="para4"><span class="span3">Use the </span><span class="span8">_settextposition</span><span class="span3"> function to move the cursor to a specific screen coordinate, then use </span><span class="span8">_outtext</span><span class="span3"> to print the text you want to display. If you&apos;ve set the colors, your text will use the colors you last defined, regardless of what&apos;s already on the screen.</span></p><p class="para4"><span class="span3">For example, to print the text &quot;FreeDOS&quot; at line 12 and column 36 (which is more or less centered on the screen) use these two functions:</span></p><p class="para6"><span class="span6">  _settextposition(12, 36);</span></p><p class="para7"><span class="span6">  _outtext(&quot;FreeDOS&quot;);</span></p><p class="para4"><span class="span3">Here&apos;s a small example program:</span></p><p class="para6"><span class="span6">#include &lt;conio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;graph.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">    _setvideomode(_TEXTC80);</span></p><p class="para6"><span class="span6">    _settextcolor(14);</span></p><p class="para6"><span class="span6">    _setbkcolor(4);</span></p><p class="para6"><span class="span6">    _settextposition(12, 36);</span></p><p class="para6"><span class="span6">    _outtext(&quot;FreeDOS&quot;);</span></p><p class="para6"><span class="span6">    </span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/getch.html"><span class="span7">getch</span></a><span class="span6">();</span></p><p class="para6"><span class="span6">    _setvideomode(_DEFAULTMODE);</span></p><p class="para6"><span class="span6">    return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">Compile and run the program to see this output:</span></p><p class="para4"><img alt="OEBPS/images/image0008.png" class="frame5" src="../images/image0008.png"/><span class="span3"> </span> </p><p class="para5"><span class="span5">Text windows</span></p><p class="para4"><span class="span3">The trick to unleashing the power of </span><span class="span8">conio</span><span class="span3"> is to leverage a feature of the PC video display where a program can control the video hardware by region. These are called text windows and are a really cool feature of </span><span class="span8">conio</span><span class="span3">.</span></p><p class="para4"><span class="span3">A text window is just an area of the screen, defined as a rectangle starting at a particular </span><span class="span9">row</span><span class="span3">,</span><span class="span9">col</span><span class="span3"> and ending at a different </span><span class="span9">row</span><span class="span3">,</span><span class="span9">col</span><span class="span3">. These regions can take up the whole screen or be as small as a single line. Once you define a window, you can clear it with a background color and position text in it.</span></p><p class="para4"><span class="span3">To define a text window starting at row 5 and column 10, and extending to row 15 and column 70, you use the </span><span class="span8">_settextwindow</span><span class="span3"> function like this:</span></p><p class="para7"><span class="span6">  _settextwindow(5, 10, 15, 70);</span></p><p class="para4"><span class="span3">Now that you&apos;ve defined the window, any text you draw in it uses 1,1 as the upper-left corner of the text window. Placing text at 1,1 will actually position that text at row 5 and column 10, where the window starts on the screen.</span></p><p class="para4"><span class="span3">You can also clear the window with a background color. The </span><span class="span8">_clearscreen</span><span class="span3"> function does double duty to clear either the full screen or just the window that&apos;s currently defined. To clear the entire screen, give the value </span><span class="span8">_GCLEARSCREEN</span><span class="span3"> to the function. To clear just the window, use </span><span class="span8">_GWINDOW</span><span class="span3">. With either usage, you&apos;ll fill that region with whatever background color you last set. For example, to clear the whole screen with cyan (color 3) and a smaller text window with blue (color 1) you could use this code:</span></p><p class="para6"><span class="span6">  _setbkcolor(3);</span></p><p class="para6"><span class="span6">  _clearscreen(_GCLEARSCREEN);</span></p><p class="para6"><span class="span6">  _settextwindow(5, 10, 15, 70);</span></p><p class="para6"><span class="span6">  _setbkcolor(1);</span></p><p class="para7"><span class="span6">  _clearscreen(_GWINDOW);</span></p><p class="para4"><span class="span3">This makes it really easy to fill in certain areas of the screen. In fact, defining a window and filling it with color is such a common thing to do that I often create a function to do both at once. Many of my </span><span class="span8">conio</span><span class="span3"> programs include some variation of these two functions to clear the screen or window:</span></p><p class="para6"><span class="span6">#include &lt;conio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;graph.h&gt;</span></p><p class="para6"><span class="span6">void</span></p><p class="para6"><span class="span6">clear_color(int fg, int bg)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  _settextcolor(fg);</span></p><p class="para6"><span class="span6">  _setbkcolor(bg);</span></p><p class="para6"><span class="span6">  _clearscreen(_GCLEARSCREEN);</span></p><p class="para6"><span class="span6">}</span></p><p class="para6"><span class="span6">void</span></p><p class="para6"><span class="span6">textwindow_color(int top, int left, int bottom, int right, int fg, int bg)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  _settextwindow(top, left, bottom, right);</span></p><p class="para6"><span class="span6">  _settextcolor(fg);</span></p><p class="para6"><span class="span6">  _setbkcolor(bg);</span></p><p class="para6"><span class="span6">  _clearscreen(_GWINDOW);</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">A text window can be any size, even a single line. This is handy to define a title bar at the top of the screen or a status line at the bottom of the screen. Again, I find this to be such a useful addition to my programs that I&apos;ll frequently write functions to do it for me:</span></p><p class="para6"><span class="span6">#include &lt;conio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;graph.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;string.h&gt;                    /* for strlen */</span></p><p class="para6"><span class="span6">void</span></p><p class="para6"><span class="span6">clear_color(int fg, int bg)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  … </span></p><p class="para6"><span class="span6">}</span></p><p class="para6"><span class="span6">void</span></p><p class="para6"><span class="span6">textwindow_color(int top, int left, int bottom, int right, int fg, int bg)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  … </span></p><p class="para6"><span class="span6">}</span></p><p class="para6"><span class="span6">void</span></p><p class="para6"><span class="span6">print_header(int fg, int bg, const char *text)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  textwindow_color(1, 1, 1, 80, fg, bg);</span></p><p class="para6"><span class="span6">  _settextposition(1, 40 - (strlen(text) / 2));</span></p><p class="para6"><span class="span6">  _outtext(text);</span></p><p class="para6"><span class="span6">}</span></p><p class="para6"><span class="span6">void</span></p><p class="para6"><span class="span6">print_status(int fg, int bg, const char *text)</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  textwindow_color(25, 1, 25, 80, fg, bg);</span></p><p class="para6"><span class="span6">  _settextposition(1, 1);</span></p><p class="para6"><span class="span6">  _outtext(text);</span></p><p class="para7"><span class="span6">}</span></p><p class="para5"><span class="span5">Putting it all together</span></p><p class="para4"><span class="span3">With this introduction to </span><span class="span8">conio</span><span class="span3">, and with the set of functions we&apos;ve defined above, you can create the outlines of almost any program. Let&apos;s write a quick example that demonstrates how text windows work with </span><span class="span8">conio</span><span class="span3">. We&apos;ll clear the screen with a color, then print some sample text on the second line. That leaves room to put a title line at the top of the screen. We&apos;ll also print a status line at the bottom of the screen.</span></p><p class="para4"><span class="span3">This is the basics of many kinds of applications. Placing a text window towards the right of the screen could be useful if you were writing a &quot;monitor&quot; program, such as part of a control system, like this:</span></p><p class="para6"><span class="span6">#include &lt;conio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;graph.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  _setvideomode(_TEXTC80);</span></p><p class="para6"><span class="span6">  clear_color(7, 1);                   /* white on blue */</span></p><p class="para6"><span class="span6">  _settextposition(2, 1);</span></p><p class="para6"><span class="span6">  _outtext(&quot;test&quot;);</span></p><p class="para6"><span class="span6">  print_header(0, 7, &quot;MONITOR&quot;);       /* black on white */</span></p><p class="para6"><span class="span6">  textwindow_color(3, 60, 23, 79, 15, 3);       /* br white on cyan */</span></p><p class="para6"><span class="span6">  _settextposition(3, 2);</span></p><p class="para6"><span class="span6">  _outtext(&quot;hi mom&quot;);</span></p><p class="para6"><span class="span6">  print_status(0, 7, &quot;press any key to quit...&quot;);       /* black on white */</span></p><p class="para6"><span class="span6">  getch();</span></p><p class="para6"><span class="span6">  _setvideomode(_DEFAULTMODE);</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">Having already written our own window functions to do most of the repetitive work, this program becomes very straightforward: clear the screen with a blue background, then print &quot;test&quot; on the second line. There&apos;s a header line and a status line, but the interesting part is in the middle where the program defines a text window near the right edge of the screen and prints some sample text. The </span><span class="span8">getch()</span><span class="span3"> function waits for the user to press a key on the keyboard, useful when you need to wait until the user is ready:</span></p><p class="para4"><img alt="OEBPS/images/image0009.png" class="frame5" src="../images/image0009.png"/><span class="span3"> </span> </p><p class="para4"><span class="span3">We can change only a few values to completely change the look and function of this program. By setting the background to green and red text on a white window, we have the start of a solitaire card game:</span></p><p class="para6"><span class="span6">#include &lt;conio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;graph.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  _setvideomode(_TEXTC80);</span></p><p class="para6"><span class="span6">  clear_color(7, 2);                   /* white on green */</span></p><p class="para6"><span class="span6">  _settextposition(2, 1);</span></p><p class="para6"><span class="span6">  _outtext(&quot;test&quot;);</span></p><p class="para6"><span class="span6">  print_header(14, 4, &quot;SOLITAIRE&quot;);    /* br yellow on red */</span></p><p class="para6"><span class="span6">  textwindow_color(10, 10, 17, 22, 4, 7);       /* red on white */</span></p><p class="para6"><span class="span6">  _settextposition(3, 2);</span></p><p class="para6"><span class="span6">  _outtext(&quot;hi mom&quot;);</span></p><p class="para6"><span class="span6">  print_status(7, 6, &quot;press any key to quit...&quot;);       /* white on brown */</span></p><p class="para6"><span class="span6">  getch();</span></p><p class="para6"><span class="span6">  _setvideomode(_DEFAULTMODE);</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">You could add other code to this sample program to print card values and suits, place cards on top of other cards, and other functionality to create a complete game. But for this demo, we&apos;ll just draw a single &quot;card&quot; displaying some text:</span></p><p class="para4"><img alt="OEBPS/images/image0010.png" class="frame5" src="../images/image0010.png"/><span class="span3"> </span> </p><p class="para4"><span class="span3">You can create other effects using text windows. For example, before drawing a message window, you could first draw a black window that&apos;s offset by one row and one column. The text window will appear to create a shadow over that area of the screen to the user. And we can do it all by changing only a few values in our sample program:</span></p><p class="para6"><span class="span6">#include &lt;conio.h&gt;</span></p><p class="para6"><span class="span6">#include &lt;graph.h&gt;</span></p><p class="para6"><span class="span6">int</span></p><p class="para6"><span class="span6">main()</span></p><p class="para6"><span class="span6">{</span></p><p class="para6"><span class="span6">  _setvideomode(_TEXTC80);</span></p><p class="para6"><span class="span6">  clear_color(7, 1);                   /* white on blue */</span></p><p class="para6"><span class="span6">  _settextposition(2, 1);</span></p><p class="para6"><span class="span6">  _outtext(&quot;test&quot;);</span></p><p class="para6"><span class="span6">  print_header(15, 3, &quot;PROGRAMMING IN CONIO&quot;);  /* br white on cyan */</span></p><p class="para6"><span class="span6">  textwindow_color(11, 36, 16, 46, 7, 0);       /* shadow */</span></p><p class="para6"><span class="span6">  textwindow_color(10, 35, 15, 45, 7, 4);       /* white on red */</span></p><p class="para6"><span class="span6">  _settextposition(3, 2);</span></p><p class="para6"><span class="span6">  _outtext(&quot;hi mom&quot;);</span></p><p class="para6"> </p><p class="para6"><span class="span6">  print_status(0, 7, &quot;press any key to quit...&quot;);       /* black on white */</span></p><p class="para6"><span class="span6">  getch();</span></p><p class="para6"><span class="span6">  _setvideomode(_DEFAULTMODE);</span></p><p class="para6"><span class="span6">  return 0;</span></p><p class="para7"><span class="span6">}</span></p><p class="para4"><span class="span3">You often see this &quot;shadow&quot; effect used in DOS programs as a way to add some visual flair:</span></p><p class="para4"><img alt="OEBPS/images/image0011.png" class="frame5" src="../images/image0011.png"/><span class="span3"> </span> </p><p class="para4"><span class="span3">The DOS </span><span class="span8">conio</span><span class="span3"> functions can do much more than I&apos;ve shown here, but with this introduction to </span><span class="span8">conio</span><span class="span3"> programming, you can create various practical and exciting applications. Direct screen access means your programs can be more interactive than a simple command-line utility that scrolls text from the bottom of the screen. Leverage the flexibility of </span><span class="span8">conio</span><span class="span3"> programming and make your next DOS program a great one.</span></p><p class="para5"> </p></body></html>